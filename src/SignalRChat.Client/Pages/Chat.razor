@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<h3>Ejemplo chat</h3>
<div class="form-group row">
    <label for="usuario" class="col-sm-2 col-form-label">Usuario</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="usuario" @bind="UserInput">
    </div>
</div>
<div class="form-group row">
    <label for="Mensage" class="col-sm-2 col-form-label">Mensaje</label>
    <div class="col-sm-10">
        <input type="text" class="form-control" id="Mensage" @bind="MessageInput">
    </div>
</div>

<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<ul id="messagesList">
@foreach (var message in _messages)
{
    <li>@message</li>
}
</ul>



@code
{
    private HubConnection _hubConnection;
    private readonly List<string> _messages = new List<string>();

    public string MessageInput;
    public string UserInput;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5000/chat")
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var messageCompleted = $"{user}: {message}";
            _messages.Add(messageCompleted);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    public bool IsConnected => 
        _hubConnection.State == HubConnectionState.Connected;

    public async Task Send() => 
        await _hubConnection.SendAsync("SendMessage", UserInput, MessageInput);

    public async ValueTask DisposeAsync()
    {
        await _hubConnection.DisposeAsync();
    }
}
